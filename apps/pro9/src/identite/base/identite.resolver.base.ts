/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Identite } from "./Identite";
import { IdentiteCountArgs } from "./IdentiteCountArgs";
import { IdentiteFindManyArgs } from "./IdentiteFindManyArgs";
import { IdentiteFindUniqueArgs } from "./IdentiteFindUniqueArgs";
import { CreateIdentiteArgs } from "./CreateIdentiteArgs";
import { UpdateIdentiteArgs } from "./UpdateIdentiteArgs";
import { DeleteIdentiteArgs } from "./DeleteIdentiteArgs";
import { Salarie } from "../../salarie/base/Salarie";
import { IdentiteService } from "../identite.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Identite)
export class IdentiteResolverBase {
  constructor(
    protected readonly service: IdentiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "read",
    possession: "any",
  })
  async _identitesMeta(
    @graphql.Args() args: IdentiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Identite])
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "read",
    possession: "any",
  })
  async identites(
    @graphql.Args() args: IdentiteFindManyArgs
  ): Promise<Identite[]> {
    return this.service.identites(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Identite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "read",
    possession: "own",
  })
  async identite(
    @graphql.Args() args: IdentiteFindUniqueArgs
  ): Promise<Identite | null> {
    const result = await this.service.identite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identite)
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "create",
    possession: "any",
  })
  async createIdentite(
    @graphql.Args() args: CreateIdentiteArgs
  ): Promise<Identite> {
    return await this.service.createIdentite({
      ...args,
      data: {
        ...args.data,

        salarie: {
          connect: args.data.salarie,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identite)
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "update",
    possession: "any",
  })
  async updateIdentite(
    @graphql.Args() args: UpdateIdentiteArgs
  ): Promise<Identite | null> {
    try {
      return await this.service.updateIdentite({
        ...args,
        data: {
          ...args.data,

          salarie: {
            connect: args.data.salarie,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Identite)
  @nestAccessControl.UseRoles({
    resource: "Identite",
    action: "delete",
    possession: "any",
  })
  async deleteIdentite(
    @graphql.Args() args: DeleteIdentiteArgs
  ): Promise<Identite | null> {
    try {
      return await this.service.deleteIdentite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salarie, {
    nullable: true,
    name: "salarie",
  })
  @nestAccessControl.UseRoles({
    resource: "Salarie",
    action: "read",
    possession: "any",
  })
  async getSalarie(
    @graphql.Parent() parent: Identite
  ): Promise<Salarie | null> {
    const result = await this.service.getSalarie(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
