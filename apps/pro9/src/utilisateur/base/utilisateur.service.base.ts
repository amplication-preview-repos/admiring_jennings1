/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Utilisateur as PrismaUtilisateur,
  Perimetre as PrismaPerimetre,
} from "@prisma/client";
import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class UtilisateurServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(
    args: Omit<Prisma.UtilisateurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilisateur.count(args);
  }

  async utilisateurs(
    args: Prisma.UtilisateurFindManyArgs
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.utilisateur.findMany(args);
  }
  async utilisateur(
    args: Prisma.UtilisateurFindUniqueArgs
  ): Promise<PrismaUtilisateur | null> {
    return this.prisma.utilisateur.findUnique(args);
  }
  async createUtilisateur(
    args: Prisma.UtilisateurCreateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.create({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateUtilisateur(
    args: Prisma.UtilisateurUpdateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.update({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteUtilisateur(
    args: Prisma.UtilisateurDeleteArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.delete(args);
  }

  async getPerimetre(parentId: string): Promise<PrismaPerimetre | null> {
    return this.prisma.utilisateur
      .findUnique({
        where: { id: parentId },
      })
      .perimetre();
  }
}
