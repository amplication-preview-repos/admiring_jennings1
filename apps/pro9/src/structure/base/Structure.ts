/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Affectation } from "../../affectation/base/Affectation";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumStructureTypeField } from "./EnumStructureTypeField";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";

@ObjectType()
class Structure {
  @ApiProperty({
    required: false,
    type: () => Affectation,
  })
  @ValidateNested()
  @Type(() => Affectation)
  @IsOptional()
  affectationDomaine?: Affectation | null;

  @ApiProperty({
    required: false,
    type: () => [Affectation],
  })
  @ValidateNested()
  @Type(() => Affectation)
  @IsOptional()
  affectations?: Array<Affectation>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  code!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    enum: EnumStructureTypeField,
  })
  @IsEnum(EnumStructureTypeField)
  @IsOptional()
  @Field(() => EnumStructureTypeField, {
    nullable: true,
  })
  typeField?: "Agence" | "Association" | "Federation" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Utilisateur,
  })
  @ValidateNested()
  @Type(() => Utilisateur)
  @IsOptional()
  utilisateur?: Utilisateur | null;
}

export { Structure as Structure };
