/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StructureService } from "../structure.service";
import { StructureCreateInput } from "./StructureCreateInput";
import { Structure } from "./Structure";
import { StructureFindManyArgs } from "./StructureFindManyArgs";
import { StructureWhereUniqueInput } from "./StructureWhereUniqueInput";
import { StructureUpdateInput } from "./StructureUpdateInput";
import { AffectationFindManyArgs } from "../../affectation/base/AffectationFindManyArgs";
import { Affectation } from "../../affectation/base/Affectation";
import { AffectationWhereUniqueInput } from "../../affectation/base/AffectationWhereUniqueInput";

export class StructureControllerBase {
  constructor(protected readonly service: StructureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Structure })
  async createStructure(
    @common.Body() data: StructureCreateInput
  ): Promise<Structure> {
    return await this.service.createStructure({
      data: {
        ...data,

        affectationDomaine: data.affectationDomaine
          ? {
              connect: data.affectationDomaine,
            }
          : undefined,

        perimetre: {
          connect: data.perimetre,
        },
      },
      select: {
        affectationDomaine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        libell: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Structure] })
  @ApiNestedQuery(StructureFindManyArgs)
  async structures(@common.Req() request: Request): Promise<Structure[]> {
    const args = plainToClass(StructureFindManyArgs, request.query);
    return this.service.structures({
      ...args,
      select: {
        affectationDomaine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        libell: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Structure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async structure(
    @common.Param() params: StructureWhereUniqueInput
  ): Promise<Structure | null> {
    const result = await this.service.structure({
      where: params,
      select: {
        affectationDomaine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        libell: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Structure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStructure(
    @common.Param() params: StructureWhereUniqueInput,
    @common.Body() data: StructureUpdateInput
  ): Promise<Structure | null> {
    try {
      return await this.service.updateStructure({
        where: params,
        data: {
          ...data,

          affectationDomaine: data.affectationDomaine
            ? {
                connect: data.affectationDomaine,
              }
            : undefined,

          perimetre: {
            connect: data.perimetre,
          },
        },
        select: {
          affectationDomaine: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          libell: true,

          perimetre: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Structure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStructure(
    @common.Param() params: StructureWhereUniqueInput
  ): Promise<Structure | null> {
    try {
      return await this.service.deleteStructure({
        where: params,
        select: {
          affectationDomaine: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          libell: true,

          perimetre: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/affectations")
  @ApiNestedQuery(AffectationFindManyArgs)
  async findAffectations(
    @common.Req() request: Request,
    @common.Param() params: StructureWhereUniqueInput
  ): Promise<Affectation[]> {
    const query = plainToClass(AffectationFindManyArgs, request.query);
    const results = await this.service.findAffectations(params.id, {
      ...query,
      select: {
        activite: true,
        createdAt: true,

        domaine: {
          select: {
            id: true,
          },
        },

        id: true,

        salarie: {
          select: {
            id: true,
          },
        },

        structure: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/affectations")
  async connectAffectations(
    @common.Param() params: StructureWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        connect: body,
      },
    };
    await this.service.updateStructure({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/affectations")
  async updateAffectations(
    @common.Param() params: StructureWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        set: body,
      },
    };
    await this.service.updateStructure({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/affectations")
  async disconnectAffectations(
    @common.Param() params: StructureWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        disconnect: body,
      },
    };
    await this.service.updateStructure({
      where: params,
      data,
      select: { id: true },
    });
  }
}
