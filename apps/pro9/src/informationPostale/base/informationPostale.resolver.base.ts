/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InformationPostale } from "./InformationPostale";
import { InformationPostaleCountArgs } from "./InformationPostaleCountArgs";
import { InformationPostaleFindManyArgs } from "./InformationPostaleFindManyArgs";
import { InformationPostaleFindUniqueArgs } from "./InformationPostaleFindUniqueArgs";
import { CreateInformationPostaleArgs } from "./CreateInformationPostaleArgs";
import { UpdateInformationPostaleArgs } from "./UpdateInformationPostaleArgs";
import { DeleteInformationPostaleArgs } from "./DeleteInformationPostaleArgs";
import { Adresse } from "../../adresse/base/Adresse";
import { InformationPostaleService } from "../informationPostale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InformationPostale)
export class InformationPostaleResolverBase {
  constructor(
    protected readonly service: InformationPostaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "read",
    possession: "any",
  })
  async _informationPostalesMeta(
    @graphql.Args() args: InformationPostaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InformationPostale])
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "read",
    possession: "any",
  })
  async informationPostales(
    @graphql.Args() args: InformationPostaleFindManyArgs
  ): Promise<InformationPostale[]> {
    return this.service.informationPostales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InformationPostale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "read",
    possession: "own",
  })
  async informationPostale(
    @graphql.Args() args: InformationPostaleFindUniqueArgs
  ): Promise<InformationPostale | null> {
    const result = await this.service.informationPostale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InformationPostale)
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "create",
    possession: "any",
  })
  async createInformationPostale(
    @graphql.Args() args: CreateInformationPostaleArgs
  ): Promise<InformationPostale> {
    return await this.service.createInformationPostale({
      ...args,
      data: {
        ...args.data,

        adresse: {
          connect: args.data.adresse,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InformationPostale)
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "update",
    possession: "any",
  })
  async updateInformationPostale(
    @graphql.Args() args: UpdateInformationPostaleArgs
  ): Promise<InformationPostale | null> {
    try {
      return await this.service.updateInformationPostale({
        ...args,
        data: {
          ...args.data,

          adresse: {
            connect: args.data.adresse,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InformationPostale)
  @nestAccessControl.UseRoles({
    resource: "InformationPostale",
    action: "delete",
    possession: "any",
  })
  async deleteInformationPostale(
    @graphql.Args() args: DeleteInformationPostaleArgs
  ): Promise<InformationPostale | null> {
    try {
      return await this.service.deleteInformationPostale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Adresse, {
    nullable: true,
    name: "adresse",
  })
  @nestAccessControl.UseRoles({
    resource: "Adresse",
    action: "read",
    possession: "any",
  })
  async getAdresse(
    @graphql.Parent() parent: InformationPostale
  ): Promise<Adresse | null> {
    const result = await this.service.getAdresse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
