/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Habilitation } from "./Habilitation";
import { HabilitationCountArgs } from "./HabilitationCountArgs";
import { HabilitationFindManyArgs } from "./HabilitationFindManyArgs";
import { HabilitationFindUniqueArgs } from "./HabilitationFindUniqueArgs";
import { CreateHabilitationArgs } from "./CreateHabilitationArgs";
import { UpdateHabilitationArgs } from "./UpdateHabilitationArgs";
import { DeleteHabilitationArgs } from "./DeleteHabilitationArgs";
import { Perimetre } from "../../perimetre/base/Perimetre";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { HabilitationService } from "../habilitation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Habilitation)
export class HabilitationResolverBase {
  constructor(
    protected readonly service: HabilitationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "read",
    possession: "any",
  })
  async _habilitationsMeta(
    @graphql.Args() args: HabilitationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Habilitation])
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "read",
    possession: "any",
  })
  async habilitations(
    @graphql.Args() args: HabilitationFindManyArgs
  ): Promise<Habilitation[]> {
    return this.service.habilitations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Habilitation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "read",
    possession: "own",
  })
  async habilitation(
    @graphql.Args() args: HabilitationFindUniqueArgs
  ): Promise<Habilitation | null> {
    const result = await this.service.habilitation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Habilitation)
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "create",
    possession: "any",
  })
  async createHabilitation(
    @graphql.Args() args: CreateHabilitationArgs
  ): Promise<Habilitation> {
    return await this.service.createHabilitation({
      ...args,
      data: {
        ...args.data,

        perimetre: {
          connect: args.data.perimetre,
        },

        utilisateur: {
          connect: args.data.utilisateur,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Habilitation)
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "update",
    possession: "any",
  })
  async updateHabilitation(
    @graphql.Args() args: UpdateHabilitationArgs
  ): Promise<Habilitation | null> {
    try {
      return await this.service.updateHabilitation({
        ...args,
        data: {
          ...args.data,

          perimetre: {
            connect: args.data.perimetre,
          },

          utilisateur: {
            connect: args.data.utilisateur,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Habilitation)
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "delete",
    possession: "any",
  })
  async deleteHabilitation(
    @graphql.Args() args: DeleteHabilitationArgs
  ): Promise<Habilitation | null> {
    try {
      return await this.service.deleteHabilitation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Perimetre, {
    nullable: true,
    name: "perimetre",
  })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "any",
  })
  async getPerimetre(
    @graphql.Parent() parent: Habilitation
  ): Promise<Perimetre | null> {
    const result = await this.service.getPerimetre(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Habilitation
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
