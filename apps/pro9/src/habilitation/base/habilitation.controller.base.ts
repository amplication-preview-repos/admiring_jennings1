/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HabilitationService } from "../habilitation.service";
import { HabilitationCreateInput } from "./HabilitationCreateInput";
import { Habilitation } from "./Habilitation";
import { HabilitationFindManyArgs } from "./HabilitationFindManyArgs";
import { HabilitationWhereUniqueInput } from "./HabilitationWhereUniqueInput";
import { HabilitationUpdateInput } from "./HabilitationUpdateInput";

export class HabilitationControllerBase {
  constructor(protected readonly service: HabilitationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Habilitation })
  async createHabilitation(
    @common.Body() data: HabilitationCreateInput
  ): Promise<Habilitation> {
    return await this.service.createHabilitation({
      data: {
        ...data,

        perimetre: {
          connect: data.perimetre,
        },

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        createdAt: true,
        gestionAdministration: true,
        gestionUtilisateur: true,
        id: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Habilitation] })
  @ApiNestedQuery(HabilitationFindManyArgs)
  async habilitations(@common.Req() request: Request): Promise<Habilitation[]> {
    const args = plainToClass(HabilitationFindManyArgs, request.query);
    return this.service.habilitations({
      ...args,
      select: {
        createdAt: true,
        gestionAdministration: true,
        gestionUtilisateur: true,
        id: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Habilitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async habilitation(
    @common.Param() params: HabilitationWhereUniqueInput
  ): Promise<Habilitation | null> {
    const result = await this.service.habilitation({
      where: params,
      select: {
        createdAt: true,
        gestionAdministration: true,
        gestionUtilisateur: true,
        id: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Habilitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHabilitation(
    @common.Param() params: HabilitationWhereUniqueInput,
    @common.Body() data: HabilitationUpdateInput
  ): Promise<Habilitation | null> {
    try {
      return await this.service.updateHabilitation({
        where: params,
        data: {
          ...data,

          perimetre: {
            connect: data.perimetre,
          },

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          createdAt: true,
          gestionAdministration: true,
          gestionUtilisateur: true,
          id: true,

          perimetre: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Habilitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHabilitation(
    @common.Param() params: HabilitationWhereUniqueInput
  ): Promise<Habilitation | null> {
    try {
      return await this.service.deleteHabilitation({
        where: params,
        select: {
          createdAt: true,
          gestionAdministration: true,
          gestionUtilisateur: true,
          id: true,

          perimetre: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
