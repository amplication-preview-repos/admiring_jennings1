/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Habilitation as PrismaHabilitation,
  Perimetre as PrismaPerimetre,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class HabilitationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HabilitationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.habilitation.count(args);
  }

  async habilitations(
    args: Prisma.HabilitationFindManyArgs
  ): Promise<PrismaHabilitation[]> {
    return this.prisma.habilitation.findMany(args);
  }
  async habilitation(
    args: Prisma.HabilitationFindUniqueArgs
  ): Promise<PrismaHabilitation | null> {
    return this.prisma.habilitation.findUnique(args);
  }
  async createHabilitation(
    args: Prisma.HabilitationCreateArgs
  ): Promise<PrismaHabilitation> {
    return this.prisma.habilitation.create(args);
  }
  async updateHabilitation(
    args: Prisma.HabilitationUpdateArgs
  ): Promise<PrismaHabilitation> {
    return this.prisma.habilitation.update(args);
  }
  async deleteHabilitation(
    args: Prisma.HabilitationDeleteArgs
  ): Promise<PrismaHabilitation> {
    return this.prisma.habilitation.delete(args);
  }

  async getPerimetre(parentId: string): Promise<PrismaPerimetre | null> {
    return this.prisma.habilitation
      .findUnique({
        where: { id: parentId },
      })
      .perimetre();
  }

  async getUtilisateur(parentId: string): Promise<PrismaUtilisateur | null> {
    return this.prisma.habilitation
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}
