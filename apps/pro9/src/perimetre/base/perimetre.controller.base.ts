/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PerimetreService } from "../perimetre.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PerimetreCreateInput } from "./PerimetreCreateInput";
import { Perimetre } from "./Perimetre";
import { PerimetreFindManyArgs } from "./PerimetreFindManyArgs";
import { PerimetreWhereUniqueInput } from "./PerimetreWhereUniqueInput";
import { PerimetreUpdateInput } from "./PerimetreUpdateInput";
import { HabilitationFindManyArgs } from "../../habilitation/base/HabilitationFindManyArgs";
import { Habilitation } from "../../habilitation/base/Habilitation";
import { HabilitationWhereUniqueInput } from "../../habilitation/base/HabilitationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PerimetreControllerBase {
  constructor(
    protected readonly service: PerimetreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Perimetre })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPerimetre(
    @common.Body() data: PerimetreCreateInput
  ): Promise<Perimetre> {
    return await this.service.createPerimetre({
      data: {
        ...data,

        structure: {
          connect: data.structure,
        },
      },
      select: {
        createdAt: true,
        id: true,

        structure: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Perimetre] })
  @ApiNestedQuery(PerimetreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async perimetres(@common.Req() request: Request): Promise<Perimetre[]> {
    const args = plainToClass(PerimetreFindManyArgs, request.query);
    return this.service.perimetres({
      ...args,
      select: {
        createdAt: true,
        id: true,

        structure: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Perimetre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async perimetre(
    @common.Param() params: PerimetreWhereUniqueInput
  ): Promise<Perimetre | null> {
    const result = await this.service.perimetre({
      where: params,
      select: {
        createdAt: true,
        id: true,

        structure: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Perimetre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePerimetre(
    @common.Param() params: PerimetreWhereUniqueInput,
    @common.Body() data: PerimetreUpdateInput
  ): Promise<Perimetre | null> {
    try {
      return await this.service.updatePerimetre({
        where: params,
        data: {
          ...data,

          structure: {
            connect: data.structure,
          },
        },
        select: {
          createdAt: true,
          id: true,

          structure: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Perimetre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePerimetre(
    @common.Param() params: PerimetreWhereUniqueInput
  ): Promise<Perimetre | null> {
    try {
      return await this.service.deletePerimetre({
        where: params,
        select: {
          createdAt: true,
          id: true,

          structure: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/habilitations")
  @ApiNestedQuery(HabilitationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Habilitation",
    action: "read",
    possession: "any",
  })
  async findHabilitations(
    @common.Req() request: Request,
    @common.Param() params: PerimetreWhereUniqueInput
  ): Promise<Habilitation[]> {
    const query = plainToClass(HabilitationFindManyArgs, request.query);
    const results = await this.service.findHabilitations(params.id, {
      ...query,
      select: {
        createdAt: true,
        gestionAdministration: true,
        gestionUtilisateur: true,
        id: true,

        perimetre: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/habilitations")
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "update",
    possession: "any",
  })
  async connectHabilitations(
    @common.Param() params: PerimetreWhereUniqueInput,
    @common.Body() body: HabilitationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      habilitations: {
        connect: body,
      },
    };
    await this.service.updatePerimetre({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/habilitations")
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "update",
    possession: "any",
  })
  async updateHabilitations(
    @common.Param() params: PerimetreWhereUniqueInput,
    @common.Body() body: HabilitationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      habilitations: {
        set: body,
      },
    };
    await this.service.updatePerimetre({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/habilitations")
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "update",
    possession: "any",
  })
  async disconnectHabilitations(
    @common.Param() params: PerimetreWhereUniqueInput,
    @common.Body() body: HabilitationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      habilitations: {
        disconnect: body,
      },
    };
    await this.service.updatePerimetre({
      where: params,
      data,
      select: { id: true },
    });
  }
}
