/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Perimetre as PrismaPerimetre,
  Utilisateur as PrismaUtilisateur,
  Structure as PrismaStructure,
} from "@prisma/client";

export class PerimetreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerimetreCountArgs, "select">
  ): Promise<number> {
    return this.prisma.perimetre.count(args);
  }

  async perimetres(
    args: Prisma.PerimetreFindManyArgs
  ): Promise<PrismaPerimetre[]> {
    return this.prisma.perimetre.findMany(args);
  }
  async perimetre(
    args: Prisma.PerimetreFindUniqueArgs
  ): Promise<PrismaPerimetre | null> {
    return this.prisma.perimetre.findUnique(args);
  }
  async createPerimetre(
    args: Prisma.PerimetreCreateArgs
  ): Promise<PrismaPerimetre> {
    return this.prisma.perimetre.create(args);
  }
  async updatePerimetre(
    args: Prisma.PerimetreUpdateArgs
  ): Promise<PrismaPerimetre> {
    return this.prisma.perimetre.update(args);
  }
  async deletePerimetre(
    args: Prisma.PerimetreDeleteArgs
  ): Promise<PrismaPerimetre> {
    return this.prisma.perimetre.delete(args);
  }

  async findUtilisateurs(
    parentId: string,
    args: Prisma.UtilisateurFindManyArgs
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.perimetre
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .utilisateurs(args);
  }

  async getStructure(parentId: string): Promise<PrismaStructure | null> {
    return this.prisma.perimetre
      .findUnique({
        where: { id: parentId },
      })
      .structure();
  }
}
