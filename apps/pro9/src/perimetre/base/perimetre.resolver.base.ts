/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Perimetre } from "./Perimetre";
import { PerimetreCountArgs } from "./PerimetreCountArgs";
import { PerimetreFindManyArgs } from "./PerimetreFindManyArgs";
import { PerimetreFindUniqueArgs } from "./PerimetreFindUniqueArgs";
import { CreatePerimetreArgs } from "./CreatePerimetreArgs";
import { UpdatePerimetreArgs } from "./UpdatePerimetreArgs";
import { DeletePerimetreArgs } from "./DeletePerimetreArgs";
import { UtilisateurFindManyArgs } from "../../utilisateur/base/UtilisateurFindManyArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { Structure } from "../../structure/base/Structure";
import { PerimetreService } from "../perimetre.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Perimetre)
export class PerimetreResolverBase {
  constructor(
    protected readonly service: PerimetreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "any",
  })
  async _perimetresMeta(
    @graphql.Args() args: PerimetreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Perimetre])
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "any",
  })
  async perimetres(
    @graphql.Args() args: PerimetreFindManyArgs
  ): Promise<Perimetre[]> {
    return this.service.perimetres(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Perimetre, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "read",
    possession: "own",
  })
  async perimetre(
    @graphql.Args() args: PerimetreFindUniqueArgs
  ): Promise<Perimetre | null> {
    const result = await this.service.perimetre(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Perimetre)
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "create",
    possession: "any",
  })
  async createPerimetre(
    @graphql.Args() args: CreatePerimetreArgs
  ): Promise<Perimetre> {
    return await this.service.createPerimetre({
      ...args,
      data: {
        ...args.data,

        structure: {
          connect: args.data.structure,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Perimetre)
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "update",
    possession: "any",
  })
  async updatePerimetre(
    @graphql.Args() args: UpdatePerimetreArgs
  ): Promise<Perimetre | null> {
    try {
      return await this.service.updatePerimetre({
        ...args,
        data: {
          ...args.data,

          structure: {
            connect: args.data.structure,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Perimetre)
  @nestAccessControl.UseRoles({
    resource: "Perimetre",
    action: "delete",
    possession: "any",
  })
  async deletePerimetre(
    @graphql.Args() args: DeletePerimetreArgs
  ): Promise<Perimetre | null> {
    try {
      return await this.service.deletePerimetre(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Utilisateur], { name: "utilisateurs" })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async findUtilisateurs(
    @graphql.Parent() parent: Perimetre,
    @graphql.Args() args: UtilisateurFindManyArgs
  ): Promise<Utilisateur[]> {
    const results = await this.service.findUtilisateurs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Structure, {
    nullable: true,
    name: "structure",
  })
  @nestAccessControl.UseRoles({
    resource: "Structure",
    action: "read",
    possession: "any",
  })
  async getStructure(
    @graphql.Parent() parent: Perimetre
  ): Promise<Structure | null> {
    const result = await this.service.getStructure(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
